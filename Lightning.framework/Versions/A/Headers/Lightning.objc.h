// Objective-C API for talking to github.com/mandelmonkey/lndmobile/lightning Go package.
//   gobind -lang=objc github.com/mandelmonkey/lndmobile/lightning
//
// File is generated by gobind. Do not edit.

#ifndef __Lightning_H__
#define __Lightning_H__

@import Foundation;
#include "Universe.objc.h"


@class LightningClient;
@class LightningFakeStreamHandler;
@class LightningOpenChannelHandler;
@class LightningT;
@protocol LightningMessageHandler;
@class LightningMessageHandler;
@protocol LightningOpenChannelUpdate;
@class LightningOpenChannelUpdate;

@protocol LightningMessageHandler <NSObject>
// skipped method MessageHandler.Send with unsupported parameter or return types

@end

@protocol LightningOpenChannelUpdate <NSObject>
- (void)onUpdate:(NSString*)s;
@end

@interface LightningClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (void)subscribe:(NSString*)ch events:(LightningOpenChannelHandler*)events;
@end

@interface LightningFakeStreamHandler : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewSubEventHandler initializes new SubEventHandler.
 */
- (instancetype)init;
// skipped field FakeStreamHandler.ServerStream with unsupported type: *types.Named

// skipped method FakeStreamHandler.Context with unsupported parameter or return types

// skipped method FakeStreamHandler.RecvMsg with unsupported parameter or return types

// skipped method FakeStreamHandler.Send with unsupported parameter or return types

// skipped method FakeStreamHandler.SendHeader with unsupported parameter or return types

// skipped method FakeStreamHandler.SendMsg with unsupported parameter or return types

// skipped method FakeStreamHandler.SetHeader with unsupported parameter or return types

// skipped method FakeStreamHandler.SetTrailer with unsupported parameter or return types

@end

/**
 * SubEventHandler contains callback functions that will be called when
corresponding event happens with subscription to channel.
 */
@interface LightningOpenChannelHandler : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewSubEventHandler initializes new SubEventHandler.
 */
- (instancetype)init;
/**
 * OnMessage allows to set MessageHandler to SubEventHandler.
 */
- (void)onUpdate:(id<LightningOpenChannelUpdate>)handler;
@end

@interface LightningT : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
// skipped field T.Send with unsupported type: *types.Signature

// skipped field T.ServerStream with unsupported type: *types.Named

// skipped method T.Context with unsupported parameter or return types

// skipped method T.F with unsupported parameter or return types

// skipped method T.RecvMsg with unsupported parameter or return types

// skipped method T.SendHeader with unsupported parameter or return types

// skipped method T.SendMsg with unsupported parameter or return types

// skipped method T.SetHeader with unsupported parameter or return types

// skipped method T.SetTrailer with unsupported parameter or return types

@end

FOUNDATION_EXPORT NSString* LightningChannelBalance(NSError** error);

FOUNDATION_EXPORT NSString* LightningCloseChannel(NSString* fundingTxId, long outputIndex, BOOL force, NSError** error);

FOUNDATION_EXPORT NSString* LightningConnectPeer(NSString* targetAddress, NSError** error);

FOUNDATION_EXPORT NSString* LightningCreateBip39Seed(NSError** error);

FOUNDATION_EXPORT NSString* LightningGetInfo(NSError** error);

FOUNDATION_EXPORT NSString* LightningGetTransactions(NSError** error);

FOUNDATION_EXPORT NSString* LightningListChannels(NSError** error);

FOUNDATION_EXPORT NSString* LightningListPayments(NSError** error);

FOUNDATION_EXPORT NSString* LightningListPeers(NSError** error);

/**
 * New initializes Client struct. It accepts URL to Centrifugo server,
connection Credentials, EventHandler and Config.
 */
FOUNDATION_EXPORT LightningClient* LightningNew(void);

FOUNDATION_EXPORT NSString* LightningNewAddress(int32_t addressType, NSError** error);

/**
 * NewSubEventHandler initializes new SubEventHandler.
 */
FOUNDATION_EXPORT LightningFakeStreamHandler* LightningNewFakeStreamHandler(void);

/**
 * NewSubEventHandler initializes new SubEventHandler.
 */
FOUNDATION_EXPORT LightningOpenChannelHandler* LightningNewOpenChannelHandler(void);

FOUNDATION_EXPORT NSString* LightningOpenChannel(NSString* nodePubKeyHex, int64_t localAmount, LightningOpenChannelHandler* events, NSError** error);

// skipped function OpenChannelFF with unsupported parameter or return types


FOUNDATION_EXPORT NSString* LightningPendingChannels(NSError** error);

FOUNDATION_EXPORT NSString* LightningSendPaymentSync(NSString* paymentRequest, NSError** error);

FOUNDATION_EXPORT BOOL LightningStart(NSString* dir, NSString* mnemonic, NSError** error);

FOUNDATION_EXPORT NSString* LightningWalletBalance(NSError** error);

@class LightningMessageHandler;

@class LightningOpenChannelUpdate;

@interface LightningMessageHandler : NSObject <goSeqRefInterface, LightningMessageHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
// skipped method MessageHandler.Send with unsupported parameter or return types

@end

/**
 * MessageHandler is a function to handle messages in channels.
 */
@interface LightningOpenChannelUpdate : NSObject <goSeqRefInterface, LightningOpenChannelUpdate> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onUpdate:(NSString*)s;
@end

#endif
